#
# Для развертывания приложения в кластере используется штатная интеграция GitLab с Kubernetes
#

image: alpine:3.10.1

stages:
  - test
  - build
  - review
  - cleanup
  - production

variables:
  CLOUD_SDK_IMAGE: drcoyote/gitlab_utils:0.1

Test UI:
  stage: test
  image: python:3.6.4-jessie
  script:
    - pip install -r requirements.txt -r requirements-test.txt
    - python -m unittest discover -s tests/
    - coverage run -m unittest discover -s tests/
    - coverage report --include ui/ui.py
  only:
    - branches

Build & push image:
  stage: build
  image: docker:git
  services:
    - docker:dind
  script:
    - setup_docker
    - build
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  only:
    - branches

#
# При работе с контуром тестирования мы каждый раз пересоздаем его заново
# При этом разворачиваются все компоненты приложения
#
Review:
  stage: review
  image: $CLOUD_SDK_IMAGE
  script:
    - auth
    - delete_namespace
    - prepare_namespace
    - deploy
  variables:
    KUBE_NAMESPACE: review-$CI_PROJECT_PATH_$CI_COMMIT_REF_NAME
    HOST: $CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG.$KUBE_INGRESS_BASE_DOMAIN
  environment:
    name: review/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
    url: https://$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG.$KUBE_INGRESS_BASE_DOMAIN
    on_stop: Stop review
  when: manual
  only:
    refs:
      - branches
    kubernetes: active

Stop review:
  image: $CLOUD_SDK_IMAGE
  stage: cleanup
  variables:
    GIT_STRATEGY: none
    KUBE_NAMESPACE: review-$CI_PROJECT_PATH_$CI_COMMIT_REF_NAME
    HOST: $CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG.$KUBE_INGRESS_BASE_DOMAIN
  script:
    - auth
    - delete_namespace
  environment:
    name: review/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
    kubernetes: active

#
# При работе с боевым контуром мы разворачиваем только
# интерфейсный компонент
#
Deploy (production):
  stage: production
  image: $CLOUD_SDK_IMAGE
  variables:
    KUBE_NAMESPACE: default
    HOST: nginx.$KUBE_INGRESS_BASE_DOMAIN
  script:
    - auth
    - deploy
  environment:
    name: production
    url: https://nginx.$KUBE_INGRESS_BASE_DOMAIN
  when: manual
  only:
    refs:
      - master
    kubernetes: active

.auto_devops: &auto_devops |
  [[ "$TRACE" ]] && set -x
  export CI_REGISTRY="index.docker.io"
  export CI_IMAGE=$CI_REGISTRY/$CI_REGISTRY_USER/$CI_PROJECT_NAME
  export CI_IMAGE_TAG=$CI_COMMIT_REF_SLUG

  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }

  function build() {
    echo "Building crawler ui docker image..."
    echo `git show --format="%h" HEAD | head -1` > build_info.txt
    echo `git rev-parse --abbrev-ref HEAD` >> build_info.txt
    docker build -t "$CI_IMAGE:$CI_IMAGE_TAG" -t "$CI_IMAGE:latest" .

    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to container registry..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
      echo ""
    fi

    echo "Pushing image to container registry..."
    docker push "$CI_IMAGE:$CI_IMAGE_TAG"
    docker push "$CI_IMAGE:latest"
    echo ""
  }

  function auth() {
    echo $CI_SERVICE_ACCOUNT | base64 -d > sa.json
    gcloud auth activate-service-account --key-file sa.json
    gcloud container clusters get-credentials $CI_CLUSTER_NAME --zone $CI_CLUSTER_ZONE --project $CI_GC_PROJECT
  }

  function delete_namespace() {
    gcloud dns record-sets transaction start --zone="crawler" --project $CI_GC_PROJECT || true
    gcloud dns record-sets transaction remove --zone="crawler" --name="$HOST." \
          --type=CNAME --ttl=300 "nginx.weisdd.space." --project $CI_GC_PROJECT || true
    gcloud dns record-sets transaction execute --zone="crawler" --project $CI_GC_PROJECT || true
    helm ls --all --short --namespace $KUBE_NAMESPACE | xargs helm delete --purge || true
    kubectl delete ns $KUBE_NAMESPACE || true
  }

  function prepare_namespace() {
      kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
  }

  #
  # Развертывание интерфейсной части
  #
  function deploy() {
    track="${1-stable}"
    mongo_host=rm-mongodb
    rq_host=rm-rabbitmq
    name=ui
    git clone https://$CI_CREDENTIALS@gitlab.sk-developer.ru/otus/deploy-scripts.git charts
    helm init --client-only
    if [[ "$KUBE_NAMESPACE" != "default" ]]; then
      name="$CI_ENVIRONMENT_SLUG"
      if [[ "$track" != "stable" ]]; then
        name="$name-$track"
      fi
      mongo_host=rm-"$name"-mongodb
      rq_host=rm-"$name"-rabbitmq
      echo *****************************
      echo $name
      echo $mongo_host
      echo $rq_host
      echo *****************************
      helm dep update charts/rabbitmongo
      helm upgrade --install --wait --recreate-pods rm-"$name" charts/rabbitmongo --namespace="$KUBE_NAMESPACE"
      helm upgrade --install --wait --recreate-pods bot-"$name" charts/bot --namespace="$KUBE_NAMESPACE" \
                   --set mongodbHost=$mongo_host --set rabbitmqHost=$rq_host
    fi
    gcloud dns record-sets transaction start --zone="crawler" --project $CI_GC_PROJECT
    gcloud dns record-sets transaction add --zone="crawler" --name="$HOST." \
          --type=CNAME --ttl=300 "nginx.weisdd.space." --project $CI_GC_PROJECT
    gcloud dns record-sets transaction execute --zone="crawler" --project $CI_GC_PROJECT
    helm upgrade --install \
                 --wait \
                 --recreate-pods \
                 --set $CI_PROJECT_NAME.image.tag=$CI_IMAGE_TAG \
                 --set $name.ingress.host=$HOST \
                 $name charts/ui \
                 --namespace="$KUBE_NAMESPACE" \
                 --set mongodbHost=$mongo_host
  }

before_script:
  - *auto_devops
